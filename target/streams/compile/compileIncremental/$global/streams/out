[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial source changes: [0m
[0m[[0m[0mdebug[0m] [0m[0m	removed:Set(/home/eisti/Documents/ING3/project_icc_2k19/src/main/scala/products/models/Product.scala, /home/eisti/Documents/ING3/project_icc_2k19/src/main/scala/products/messages/ProductMessages.scala, /home/eisti/Documents/ING3/project_icc_2k19/src/main/scala/products/actors/ProductRequestHandler.scala)[0m
[0m[[0m[0mdebug[0m] [0m[0m	added: Set(/home/eisti/Documents/ING3/project_icc_2k19/src/main/scala/services/products/models/Product.scala, /home/eisti/Documents/ING3/project_icc_2k19/src/main/scala/services/products/actors/ProductRequestHandler.scala, /home/eisti/Documents/ING3/project_icc_2k19/src/main/scala/services/products/messages/ProductMessages.scala)[0m
[0m[[0m[0mdebug[0m] [0m[0m	modified: Set(/home/eisti/Documents/ING3/project_icc_2k19/src/main/scala/serveur/ApplicationServer.scala, /home/eisti/Documents/ING3/project_icc_2k19/src/main/scala/routes/Router.scala)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated products: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mExternal API changes: API Changes: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mModified binary dependencies: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial directly invalidated classes: Set(products.messages.ProductMessages, products.messages.ProductMessages.DeleteProductById, products.messages.ProductMessages.ProductsResponse, products.messages.ProductMessages.ChangeProductPriceRequest, products.messages.ProductMessages.AddProductRequest, products.messages.ProductMessages.ProductResponse, products.messages.ProductMessages.GetProductsRequest, products.messages.ProductMessages.GetProductById, products.actors.ProductRequestHandler, products.messages.ProductMessages.ChangeProductLabelRequest, routes.Router, products.models.Product, services.ApplicationServer)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mSources indirectly invalidated by:[0m
[0m[[0m[0mdebug[0m] [0m[0m	product: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0m	binary dep: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0m	external source: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mAll initially invalidated classes: Set(products.messages.ProductMessages, products.messages.ProductMessages.DeleteProductById, products.messages.ProductMessages.ProductsResponse, products.messages.ProductMessages.ChangeProductPriceRequest, products.messages.ProductMessages.AddProductRequest, products.messages.ProductMessages.ProductResponse, products.messages.ProductMessages.GetProductsRequest, products.messages.ProductMessages.GetProductById, products.actors.ProductRequestHandler, products.messages.ProductMessages.ChangeProductLabelRequest, routes.Router, products.models.Product, services.ApplicationServer)[0m
[0m[[0m[0mdebug[0m] [0m[0mAll initially invalidated sources:Set(/home/eisti/Documents/ING3/project_icc_2k19/src/main/scala/services/products/models/Product.scala, /home/eisti/Documents/ING3/project_icc_2k19/src/main/scala/serveur/ApplicationServer.scala, /home/eisti/Documents/ING3/project_icc_2k19/src/main/scala/services/products/actors/ProductRequestHandler.scala, /home/eisti/Documents/ING3/project_icc_2k19/src/main/scala/services/products/messages/ProductMessages.scala, /home/eisti/Documents/ING3/project_icc_2k19/src/main/scala/routes/Router.scala)[0m
[0m[[0m[0mdebug[0m] [0m[0mRecompiling all 6 sources: invalidated sources (8) exceeded 50.0% of all sources[0m
[0m[[0m[0minfo[0m] [0m[0mCompiling 6 Scala sources to /home/eisti/Documents/ING3/project_icc_2k19/target/scala-2.12/classes ...[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting org.scala-sbt:compiler-bridge_2.12:1.2.5:compile for Scala 2.12.8[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting org.scala-sbt:compiler-bridge_2.12:1.2.5:compile for Scala 2.12.8[0m
[0m[[0m[0mdebug[0m] [0m[0m[zinc] Running cached compiler 34a78bb3 for Scala compiler version 2.12.8[0m
[0m[[0m[0mdebug[0m] [0m[0m[zinc] The Scala compiler is invoked with:[0m
[0m[[0m[0mdebug[0m] [0m[0m	-bootclasspath[0m
[0m[[0m[0mdebug[0m] [0m[0m	/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/resources.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/rt.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/sunrsasign.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/jsse.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/jce.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/charsets.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/jfr.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/classes:/home/eisti/.ivy2/cache/org.scala-lang/scala-library/jars/scala-library-2.12.8.jar[0m
[0m[[0m[0mdebug[0m] [0m[0m	-classpath[0m
[0m[[0m[0mdebug[0m] [0m[0m	/home/eisti/Documents/ING3/project_icc_2k19/target/scala-2.12/classes:/home/eisti/.ivy2/cache/com.typesafe.akka/akka-http_2.12/jars/akka-http_2.12-10.1.7.jar:/home/eisti/.ivy2/cache/com.typesafe.akka/akka-http-core_2.12/jars/akka-http-core_2.12-10.1.7.jar:/home/eisti/.ivy2/cache/com.typesafe.akka/akka-parsing_2.12/jars/akka-parsing_2.12-10.1.7.jar:/home/eisti/.ivy2/cache/com.typesafe.akka/akka-stream_2.12/jars/akka-stream_2.12-2.5.20.jar:/home/eisti/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.20.jar:/home/eisti/.ivy2/cache/com.typesafe/config/bundles/config-1.3.3.jar:/home/eisti/.ivy2/cache/org.scala-lang.modules/scala-java8-compat_2.12/bundles/scala-java8-compat_2.12-0.8.0.jar:/home/eisti/.ivy2/cache/com.typesafe.akka/akka-protobuf_2.12/jars/akka-protobuf_2.12-2.5.20.jar:/home/eisti/.ivy2/cache/org.reactivestreams/reactive-streams/jars/reactive-streams-1.0.2.jar:/home/eisti/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.3.7.jar:/home/eisti/.ivy2/cache/org.scala-lang.modules/scala-parser-combinators_2.12/bundles/scala-parser-combinators_2.12-1.1.1.jar:/home/eisti/.ivy2/cache/com.typesafe.akka/akka-http-testkit_2.12/jars/akka-http-testkit_2.12-10.1.7.jar:/home/eisti/.ivy2/cache/com.typesafe.akka/akka-http-spray-json_2.12/jars/akka-http-spray-json_2.12-10.1.7.jar:/home/eisti/.ivy2/cache/io.spray/spray-json_2.12/jars/spray-json_2.12-1.3.5.jar[0m
[0m[[0m[0mdebug[0m] [0m[0mScala compilation took 12.82687911 s[0m
[0m[[0m[0minfo[0m] [0m[0mDone compiling.[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from services.products.messages.ProductMessages.GetProductById...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(services.products.messages.ProductMessages.GetProductById)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(services.products.messages.ProductMessages.GetProductById)[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of routes.Router: Set(UsedName(asInstanceOf,[Default]), UsedName(GetProductById,[Default]), UsedName(id,[Default]), UsedName(apply,[Default]), UsedName(isInstanceOf,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of services.products.actors.ProductRequestHandler: Set(UsedName(asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(GetProductById,[Default]), UsedName(id,[Default]), UsedName(copy$default$1,[Default]), UsedName(copy,[Default]), UsedName(ne,[Default]), UsedName(apply,[Default]), UsedName(isInstanceOf,[Default]), UsedName(==,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(services.products.messages.ProductMessages.GetProductById,ModifiedNames(changes = UsedName(toString,[Default]), UsedName(asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName(getClass,[Default]), UsedName(productIterator,[Default]), UsedName(notify,[Default]), UsedName(equals,[Default]), UsedName($asInstanceOf,[Default]), UsedName(andThen,[Default]), UsedName(unapply,[Default]), UsedName($init$,[Default]), UsedName(!=,[Default]), UsedName(finalize,[Default]), UsedName(##,[Default]), UsedName(canEqual,[Default]), UsedName($isInstanceOf,[Default]), UsedName(productElement,[Default]), UsedName(synchronized,[Default]), UsedName(GetProductById,[Default]), UsedName(productArity,[Default]), UsedName(clone,[Default]), UsedName(services;products;messages;ProductMessages;GetProductById;init;,[Default]), UsedName(id,[Default]), UsedName(copy$default$1,[Default]), UsedName(wait,[Default]), UsedName(compose,[Default]), UsedName(eq,[Default]), UsedName(notifyAll,[Default]), UsedName(copy,[Default]), UsedName(ne,[Default]), UsedName(productPrefix,[Default]), UsedName(apply,[Default]), UsedName(isInstanceOf,[Default]), UsedName(==,[Default]))) invalidates 3 classes due to The services.products.messages.ProductMessages.GetProductById has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(toString,[Default]), UsedName(asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName(getClass,[Default]), UsedName(productIterator,[Default]), UsedName(notify,[Default]), UsedName(equals,[Default]), UsedName($asInstanceOf,[Default]), UsedName(andThen,[Default]), UsedName(unapply,[Default]), UsedName($init$,[Default]), UsedName(!=,[Default]), UsedName(finalize,[Default]), UsedName(##,[Default]), UsedName(canEqual,[Default]), UsedName($isInstanceOf,[Default]), UsedName(productElement,[Default]), UsedName(synchronized,[Default]), UsedName(GetProductById,[Default]), UsedName(productArity,[Default]), UsedName(clone,[Default]), UsedName(services;products;messages;ProductMessages;GetProductById;init;,[Default]), UsedName(id,[Default]), UsedName(copy$default$1,[Default]), UsedName(wait,[Default]), UsedName(compose,[Default]), UsedName(eq,[Default]), UsedName(notifyAll,[Default]), UsedName(copy,[Default]), UsedName(ne,[Default]), UsedName(productPrefix,[Default]), UsedName(apply,[Default]), UsedName(isInstanceOf,[Default]), UsedName(==,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(services.products.messages.ProductMessages.GetProductById)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> by member reference: Set(routes.Router, services.products.actors.ProductRequestHandler)[0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from services.products.messages.ProductMessages.AddProductRequest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(services.products.messages.ProductMessages.AddProductRequest)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(services.products.messages.ProductMessages.AddProductRequest)[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of routes.Router: Set(UsedName(asInstanceOf,[Default]), UsedName(AddProductRequest,[Default]), UsedName(product,[Default]), UsedName(apply,[Default]), UsedName(isInstanceOf,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of services.products.actors.ProductRequestHandler: Set(UsedName(asInstanceOf,[Default]), UsedName(AddProductRequest,[Default]), UsedName(!=,[Default]), UsedName(product,[Default]), UsedName(copy$default$1,[Default]), UsedName(copy,[Default]), UsedName(ne,[Default]), UsedName(apply,[Default]), UsedName(isInstanceOf,[Default]), UsedName(==,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(services.products.messages.ProductMessages.AddProductRequest,ModifiedNames(changes = UsedName(toString,[Default]), UsedName(services;products;messages;ProductMessages;AddProductRequest;init;,[Default]), UsedName(asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName(getClass,[Default]), UsedName(productIterator,[Default]), UsedName(notify,[Default]), UsedName(equals,[Default]), UsedName(AddProductRequest,[Default]), UsedName($asInstanceOf,[Default]), UsedName(andThen,[Default]), UsedName(unapply,[Default]), UsedName($init$,[Default]), UsedName(!=,[Default]), UsedName(finalize,[Default]), UsedName(##,[Default]), UsedName(canEqual,[Default]), UsedName($isInstanceOf,[Default]), UsedName(productElement,[Default]), UsedName(synchronized,[Default]), UsedName(productArity,[Default]), UsedName(product,[Default]), UsedName(clone,[Default]), UsedName(copy$default$1,[Default]), UsedName(wait,[Default]), UsedName(compose,[Default]), UsedName(eq,[Default]), UsedName(notifyAll,[Default]), UsedName(copy,[Default]), UsedName(ne,[Default]), UsedName(productPrefix,[Default]), UsedName(apply,[Default]), UsedName(isInstanceOf,[Default]), UsedName(==,[Default]))) invalidates 3 classes due to The services.products.messages.ProductMessages.AddProductRequest has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(toString,[Default]), UsedName(services;products;messages;ProductMessages;AddProductRequest;init;,[Default]), UsedName(asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName(getClass,[Default]), UsedName(productIterator,[Default]), UsedName(notify,[Default]), UsedName(equals,[Default]), UsedName(AddProductRequest,[Default]), UsedName($asInstanceOf,[Default]), UsedName(andThen,[Default]), UsedName(unapply,[Default]), UsedName($init$,[Default]), UsedName(!=,[Default]), UsedName(finalize,[Default]), UsedName(##,[Default]), UsedName(canEqual,[Default]), UsedName($isInstanceOf,[Default]), UsedName(productElement,[Default]), UsedName(synchronized,[Default]), UsedName(productArity,[Default]), UsedName(product,[Default]), UsedName(clone,[Default]), UsedName(copy$default$1,[Default]), UsedName(wait,[Default]), UsedName(compose,[Default]), UsedName(eq,[Default]), UsedName(notifyAll,[Default]), UsedName(copy,[Default]), UsedName(ne,[Default]), UsedName(productPrefix,[Default]), UsedName(apply,[Default]), UsedName(isInstanceOf,[Default]), UsedName(==,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(services.products.messages.ProductMessages.AddProductRequest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> by member reference: Set(routes.Router, services.products.actors.ProductRequestHandler)[0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from services.products.messages.ProductMessages...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(services.products.messages.ProductMessages)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(services.products.messages.ProductMessages)[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of routes.Router: Set(UsedName(ProductMessages,[Default]), UsedName(asInstanceOf,[Default]), UsedName(ChangeProductLabelRequest,[Default]), UsedName(ProductResponse,[Default]), UsedName(AddProductRequest,[Default]), UsedName(ProductsResponse,[Default]), UsedName(GetProductById,[Default]), UsedName(ChangeProductPriceRequest,[Default]), UsedName(DeleteProductById,[Default]), UsedName(GetProductsRequest,[Default]), UsedName(isInstanceOf,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of services.products.actors.ProductRequestHandler: Set(UsedName(ProductMessages,[Default]), UsedName(asInstanceOf,[Default]), UsedName(ChangeProductLabelRequest,[Default]), UsedName(ProductResponse,[Default]), UsedName(AddProductRequest,[Default]), UsedName(ProductsResponse,[Default]), UsedName(!=,[Default]), UsedName(GetProductById,[Default]), UsedName(ChangeProductPriceRequest,[Default]), UsedName(DeleteProductById,[Default]), UsedName(ne,[Default]), UsedName(GetProductsRequest,[Default]), UsedName(isInstanceOf,[Default]), UsedName(==,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(services.products.messages.ProductMessages,ModifiedNames(changes = UsedName(toString,[Default]), UsedName(ProductMessages,[Default]), UsedName(asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName(getClass,[Default]), UsedName(ChangeProductLabelRequest,[Default]), UsedName(notify,[Default]), UsedName(equals,[Default]), UsedName(ProductResponse,[Default]), UsedName(AddProductRequest,[Default]), UsedName(ProductsResponse,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(finalize,[Default]), UsedName(##,[Default]), UsedName($isInstanceOf,[Default]), UsedName(synchronized,[Default]), UsedName(GetProductById,[Default]), UsedName(ChangeProductPriceRequest,[Default]), UsedName(clone,[Default]), UsedName(wait,[Default]), UsedName(eq,[Default]), UsedName(notifyAll,[Default]), UsedName(DeleteProductById,[Default]), UsedName(ne,[Default]), UsedName(GetProductsRequest,[Default]), UsedName(isInstanceOf,[Default]), UsedName(==,[Default]))) invalidates 3 classes due to The services.products.messages.ProductMessages has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(toString,[Default]), UsedName(ProductMessages,[Default]), UsedName(asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName(getClass,[Default]), UsedName(ChangeProductLabelRequest,[Default]), UsedName(notify,[Default]), UsedName(equals,[Default]), UsedName(ProductResponse,[Default]), UsedName(AddProductRequest,[Default]), UsedName(ProductsResponse,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(finalize,[Default]), UsedName(##,[Default]), UsedName($isInstanceOf,[Default]), UsedName(synchronized,[Default]), UsedName(GetProductById,[Default]), UsedName(ChangeProductPriceRequest,[Default]), UsedName(clone,[Default]), UsedName(wait,[Default]), UsedName(eq,[Default]), UsedName(notifyAll,[Default]), UsedName(DeleteProductById,[Default]), UsedName(ne,[Default]), UsedName(GetProductsRequest,[Default]), UsedName(isInstanceOf,[Default]), UsedName(==,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(services.products.messages.ProductMessages)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> by member reference: Set(routes.Router, services.products.actors.ProductRequestHandler)[0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from products.messages.ProductMessages.AddProductRequest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(products.messages.ProductMessages.AddProductRequest)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(products.messages.ProductMessages.AddProductRequest)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(products.messages.ProductMessages.AddProductRequest,ModifiedNames(changes = UsedName(toString,[Default]), UsedName(asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName(getClass,[Default]), UsedName(productIterator,[Default]), UsedName(notify,[Default]), UsedName(equals,[Default]), UsedName(AddProductRequest,[Default]), UsedName(products;messages;ProductMessages;AddProductRequest;init;,[Default]), UsedName($asInstanceOf,[Default]), UsedName(andThen,[Default]), UsedName(unapply,[Default]), UsedName($init$,[Default]), UsedName(!=,[Default]), UsedName(finalize,[Default]), UsedName(##,[Default]), UsedName(canEqual,[Default]), UsedName($isInstanceOf,[Default]), UsedName(productElement,[Default]), UsedName(synchronized,[Default]), UsedName(productArity,[Default]), UsedName(product,[Default]), UsedName(clone,[Default]), UsedName(copy$default$1,[Default]), UsedName(wait,[Default]), UsedName(compose,[Default]), UsedName(eq,[Default]), UsedName(notifyAll,[Default]), UsedName(copy,[Default]), UsedName(ne,[Default]), UsedName(productPrefix,[Default]), UsedName(apply,[Default]), UsedName(isInstanceOf,[Default]), UsedName(==,[Default]))) invalidates 1 classes due to The products.messages.ProductMessages.AddProductRequest has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(toString,[Default]), UsedName(asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName(getClass,[Default]), UsedName(productIterator,[Default]), UsedName(notify,[Default]), UsedName(equals,[Default]), UsedName(AddProductRequest,[Default]), UsedName(products;messages;ProductMessages;AddProductRequest;init;,[Default]), UsedName($asInstanceOf,[Default]), UsedName(andThen,[Default]), UsedName(unapply,[Default]), UsedName($init$,[Default]), UsedName(!=,[Default]), UsedName(finalize,[Default]), UsedName(##,[Default]), UsedName(canEqual,[Default]), UsedName($isInstanceOf,[Default]), UsedName(productElement,[Default]), UsedName(synchronized,[Default]), UsedName(productArity,[Default]), UsedName(product,[Default]), UsedName(clone,[Default]), UsedName(copy$default$1,[Default]), UsedName(wait,[Default]), UsedName(compose,[Default]), UsedName(eq,[Default]), UsedName(notifyAll,[Default]), UsedName(copy,[Default]), UsedName(ne,[Default]), UsedName(productPrefix,[Default]), UsedName(apply,[Default]), UsedName(isInstanceOf,[Default]), UsedName(==,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(products.messages.ProductMessages.AddProductRequest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from products.messages.ProductMessages.GetProductsRequest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(products.messages.ProductMessages.GetProductsRequest)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(products.messages.ProductMessages.GetProductsRequest)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(products.messages.ProductMessages.GetProductsRequest,ModifiedNames(changes = UsedName(toString,[Default]), UsedName(asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName(getClass,[Default]), UsedName(notify,[Default]), UsedName(equals,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(finalize,[Default]), UsedName(##,[Default]), UsedName($isInstanceOf,[Default]), UsedName(synchronized,[Default]), UsedName(clone,[Default]), UsedName(wait,[Default]), UsedName(eq,[Default]), UsedName(notifyAll,[Default]), UsedName(ne,[Default]), UsedName(GetProductsRequest,[Default]), UsedName(isInstanceOf,[Default]), UsedName(==,[Default]))) invalidates 1 classes due to The products.messages.ProductMessages.GetProductsRequest has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(toString,[Default]), UsedName(asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName(getClass,[Default]), UsedName(notify,[Default]), UsedName(equals,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(finalize,[Default]), UsedName(##,[Default]), UsedName($isInstanceOf,[Default]), UsedName(synchronized,[Default]), UsedName(clone,[Default]), UsedName(wait,[Default]), UsedName(eq,[Default]), UsedName(notifyAll,[Default]), UsedName(ne,[Default]), UsedName(GetProductsRequest,[Default]), UsedName(isInstanceOf,[Default]), UsedName(==,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(products.messages.ProductMessages.GetProductsRequest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from services.products.messages.ProductMessages.ChangeProductPriceRequest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(services.products.messages.ProductMessages.ChangeProductPriceRequest)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(services.products.messages.ProductMessages.ChangeProductPriceRequest)[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of routes.Router: Set(UsedName(asInstanceOf,[Default]), UsedName(ChangeProductPriceRequest,[Default]), UsedName(id,[Default]), UsedName(apply,[Default]), UsedName(isInstanceOf,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of services.products.actors.ProductRequestHandler: Set(UsedName(asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(price,[Default]), UsedName(ChangeProductPriceRequest,[Default]), UsedName(id,[Default]), UsedName(copy$default$1,[Default]), UsedName(copy$default$2,[Default]), UsedName(copy,[Default]), UsedName(ne,[Default]), UsedName(apply,[Default]), UsedName(isInstanceOf,[Default]), UsedName(==,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(services.products.messages.ProductMessages.ChangeProductPriceRequest,ModifiedNames(changes = UsedName(toString,[Default]), UsedName(asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName(getClass,[Default]), UsedName(productIterator,[Default]), UsedName(tupled,[Default]), UsedName(notify,[Default]), UsedName(equals,[Default]), UsedName($asInstanceOf,[Default]), UsedName(curried,[Default]), UsedName(unapply,[Default]), UsedName($init$,[Default]), UsedName(!=,[Default]), UsedName(finalize,[Default]), UsedName(##,[Default]), UsedName(canEqual,[Default]), UsedName($isInstanceOf,[Default]), UsedName(services;products;messages;ProductMessages;ChangeProductPriceRequest;init;,[Default]), UsedName(price,[Default]), UsedName(productElement,[Default]), UsedName(synchronized,[Default]), UsedName(ChangeProductPriceRequest,[Default]), UsedName(productArity,[Default]), UsedName(clone,[Default]), UsedName(id,[Default]), UsedName(copy$default$1,[Default]), UsedName(wait,[Default]), UsedName(copy$default$2,[Default]), UsedName(eq,[Default]), UsedName(notifyAll,[Default]), UsedName(copy,[Default]), UsedName(ne,[Default]), UsedName(productPrefix,[Default]), UsedName(apply,[Default]), UsedName(isInstanceOf,[Default]), UsedName(==,[Default]))) invalidates 3 classes due to The services.products.messages.ProductMessages.ChangeProductPriceRequest has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(toString,[Default]), UsedName(asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName(getClass,[Default]), UsedName(productIterator,[Default]), UsedName(tupled,[Default]), UsedName(notify,[Default]), UsedName(equals,[Default]), UsedName($asInstanceOf,[Default]), UsedName(curried,[Default]), UsedName(unapply,[Default]), UsedName($init$,[Default]), UsedName(!=,[Default]), UsedName(finalize,[Default]), UsedName(##,[Default]), UsedName(canEqual,[Default]), UsedName($isInstanceOf,[Default]), UsedName(services;products;messages;ProductMessages;ChangeProductPriceRequest;init;,[Default]), UsedName(price,[Default]), UsedName(productElement,[Default]), UsedName(synchronized,[Default]), UsedName(ChangeProductPriceRequest,[Default]), UsedName(productArity,[Default]), UsedName(clone,[Default]), UsedName(id,[Default]), UsedName(copy$default$1,[Default]), UsedName(wait,[Default]), UsedName(copy$default$2,[Default]), UsedName(eq,[Default]), UsedName(notifyAll,[Default]), UsedName(copy,[Default]), UsedName(ne,[Default]), UsedName(productPrefix,[Default]), UsedName(apply,[Default]), UsedName(isInstanceOf,[Default]), UsedName(==,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(services.products.messages.ProductMessages.ChangeProductPriceRequest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> by member reference: Set(routes.Router, services.products.actors.ProductRequestHandler)[0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from products.messages.ProductMessages.ChangeProductLabelRequest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(products.messages.ProductMessages.ChangeProductLabelRequest)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(products.messages.ProductMessages.ChangeProductLabelRequest)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(products.messages.ProductMessages.ChangeProductLabelRequest,ModifiedNames(changes = UsedName(toString,[Default]), UsedName(asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName(getClass,[Default]), UsedName(productIterator,[Default]), UsedName(tupled,[Default]), UsedName(ChangeProductLabelRequest,[Default]), UsedName(notify,[Default]), UsedName(equals,[Default]), UsedName(products;messages;ProductMessages;ChangeProductLabelRequest;init;,[Default]), UsedName($asInstanceOf,[Default]), UsedName(curried,[Default]), UsedName(unapply,[Default]), UsedName($init$,[Default]), UsedName(!=,[Default]), UsedName(finalize,[Default]), UsedName(##,[Default]), UsedName(canEqual,[Default]), UsedName($isInstanceOf,[Default]), UsedName(productElement,[Default]), UsedName(synchronized,[Default]), UsedName(productArity,[Default]), UsedName(clone,[Default]), UsedName(id,[Default]), UsedName(label,[Default]), UsedName(copy$default$1,[Default]), UsedName(wait,[Default]), UsedName(copy$default$2,[Default]), UsedName(eq,[Default]), UsedName(notifyAll,[Default]), UsedName(copy,[Default]), UsedName(ne,[Default]), UsedName(productPrefix,[Default]), UsedName(apply,[Default]), UsedName(isInstanceOf,[Default]), UsedName(==,[Default]))) invalidates 1 classes due to The products.messages.ProductMessages.ChangeProductLabelRequest has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(toString,[Default]), UsedName(asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName(getClass,[Default]), UsedName(productIterator,[Default]), UsedName(tupled,[Default]), UsedName(ChangeProductLabelRequest,[Default]), UsedName(notify,[Default]), UsedName(equals,[Default]), UsedName(products;messages;ProductMessages;ChangeProductLabelRequest;init;,[Default]), UsedName($asInstanceOf,[Default]), UsedName(curried,[Default]), UsedName(unapply,[Default]), UsedName($init$,[Default]), UsedName(!=,[Default]), UsedName(finalize,[Default]), UsedName(##,[Default]), UsedName(canEqual,[Default]), UsedName($isInstanceOf,[Default]), UsedName(productElement,[Default]), UsedName(synchronized,[Default]), UsedName(productArity,[Default]), UsedName(clone,[Default]), UsedName(id,[Default]), UsedName(label,[Default]), UsedName(copy$default$1,[Default]), UsedName(wait,[Default]), UsedName(copy$default$2,[Default]), UsedName(eq,[Default]), UsedName(notifyAll,[Default]), UsedName(copy,[Default]), UsedName(ne,[Default]), UsedName(productPrefix,[Default]), UsedName(apply,[Default]), UsedName(isInstanceOf,[Default]), UsedName(==,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(products.messages.ProductMessages.ChangeProductLabelRequest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from services.products.messages.ProductMessages.ProductResponse...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(services.products.messages.ProductMessages.ProductResponse)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(services.products.messages.ProductMessages.ProductResponse)[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of routes.Router: Set(UsedName(asInstanceOf,[Default]), UsedName(ProductResponse,[Default]), UsedName(product,[Default]), UsedName(apply,[Default]), UsedName(isInstanceOf,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of services.products.actors.ProductRequestHandler: Set(UsedName(asInstanceOf,[Default]), UsedName(ProductResponse,[Default]), UsedName(!=,[Default]), UsedName(product,[Default]), UsedName(copy$default$1,[Default]), UsedName(copy,[Default]), UsedName(ne,[Default]), UsedName(apply,[Default]), UsedName(isInstanceOf,[Default]), UsedName(==,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(services.products.messages.ProductMessages.ProductResponse,ModifiedNames(changes = UsedName(toString,[Default]), UsedName(asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName(getClass,[Default]), UsedName(productIterator,[Default]), UsedName(notify,[Default]), UsedName(equals,[Default]), UsedName(ProductResponse,[Default]), UsedName($asInstanceOf,[Default]), UsedName(andThen,[Default]), UsedName(unapply,[Default]), UsedName($init$,[Default]), UsedName(!=,[Default]), UsedName(finalize,[Default]), UsedName(##,[Default]), UsedName(canEqual,[Default]), UsedName($isInstanceOf,[Default]), UsedName(productElement,[Default]), UsedName(synchronized,[Default]), UsedName(productArity,[Default]), UsedName(product,[Default]), UsedName(clone,[Default]), UsedName(copy$default$1,[Default]), UsedName(wait,[Default]), UsedName(compose,[Default]), UsedName(eq,[Default]), UsedName(notifyAll,[Default]), UsedName(copy,[Default]), UsedName(ne,[Default]), UsedName(productPrefix,[Default]), UsedName(apply,[Default]), UsedName(isInstanceOf,[Default]), UsedName(services;products;messages;ProductMessages;ProductResponse;init;,[Default]), UsedName(==,[Default]))) invalidates 3 classes due to The services.products.messages.ProductMessages.ProductResponse has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(toString,[Default]), UsedName(asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName(getClass,[Default]), UsedName(productIterator,[Default]), UsedName(notify,[Default]), UsedName(equals,[Default]), UsedName(ProductResponse,[Default]), UsedName($asInstanceOf,[Default]), UsedName(andThen,[Default]), UsedName(unapply,[Default]), UsedName($init$,[Default]), UsedName(!=,[Default]), UsedName(finalize,[Default]), UsedName(##,[Default]), UsedName(canEqual,[Default]), UsedName($isInstanceOf,[Default]), UsedName(productElement,[Default]), UsedName(synchronized,[Default]), UsedName(productArity,[Default]), UsedName(product,[Default]), UsedName(clone,[Default]), UsedName(copy$default$1,[Default]), UsedName(wait,[Default]), UsedName(compose,[Default]), UsedName(eq,[Default]), UsedName(notifyAll,[Default]), UsedName(copy,[Default]), UsedName(ne,[Default]), UsedName(productPrefix,[Default]), UsedName(apply,[Default]), UsedName(isInstanceOf,[Default]), UsedName(services;products;messages;ProductMessages;ProductResponse;init;,[Default]), UsedName(==,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(services.products.messages.ProductMessages.ProductResponse)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> by member reference: Set(routes.Router, services.products.actors.ProductRequestHandler)[0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from products.messages.ProductMessages.DeleteProductById...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(products.messages.ProductMessages.DeleteProductById)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(products.messages.ProductMessages.DeleteProductById)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(products.messages.ProductMessages.DeleteProductById,ModifiedNames(changes = UsedName(toString,[Default]), UsedName(asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName(getClass,[Default]), UsedName(productIterator,[Default]), UsedName(notify,[Default]), UsedName(equals,[Default]), UsedName($asInstanceOf,[Default]), UsedName(andThen,[Default]), UsedName(products;messages;ProductMessages;DeleteProductById;init;,[Default]), UsedName(unapply,[Default]), UsedName($init$,[Default]), UsedName(!=,[Default]), UsedName(finalize,[Default]), UsedName(##,[Default]), UsedName(canEqual,[Default]), UsedName($isInstanceOf,[Default]), UsedName(productElement,[Default]), UsedName(synchronized,[Default]), UsedName(productArity,[Default]), UsedName(clone,[Default]), UsedName(id,[Default]), UsedName(copy$default$1,[Default]), UsedName(wait,[Default]), UsedName(compose,[Default]), UsedName(eq,[Default]), UsedName(notifyAll,[Default]), UsedName(DeleteProductById,[Default]), UsedName(copy,[Default]), UsedName(ne,[Default]), UsedName(productPrefix,[Default]), UsedName(apply,[Default]), UsedName(isInstanceOf,[Default]), UsedName(==,[Default]))) invalidates 1 classes due to The products.messages.ProductMessages.DeleteProductById has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(toString,[Default]), UsedName(asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName(getClass,[Default]), UsedName(productIterator,[Default]), UsedName(notify,[Default]), UsedName(equals,[Default]), UsedName($asInstanceOf,[Default]), UsedName(andThen,[Default]), UsedName(products;messages;ProductMessages;DeleteProductById;init;,[Default]), UsedName(unapply,[Default]), UsedName($init$,[Default]), UsedName(!=,[Default]), UsedName(finalize,[Default]), UsedName(##,[Default]), UsedName(canEqual,[Default]), UsedName($isInstanceOf,[Default]), UsedName(productElement,[Default]), UsedName(synchronized,[Default]), UsedName(productArity,[Default]), UsedName(clone,[Default]), UsedName(id,[Default]), UsedName(copy$default$1,[Default]), UsedName(wait,[Default]), UsedName(compose,[Default]), UsedName(eq,[Default]), UsedName(notifyAll,[Default]), UsedName(DeleteProductById,[Default]), UsedName(copy,[Default]), UsedName(ne,[Default]), UsedName(productPrefix,[Default]), UsedName(apply,[Default]), UsedName(isInstanceOf,[Default]), UsedName(==,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(products.messages.ProductMessages.DeleteProductById)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from services.products.messages.ProductMessages.DeleteProductById...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(services.products.messages.ProductMessages.DeleteProductById)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(services.products.messages.ProductMessages.DeleteProductById)[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of routes.Router: Set(UsedName(asInstanceOf,[Default]), UsedName(id,[Default]), UsedName(DeleteProductById,[Default]), UsedName(apply,[Default]), UsedName(isInstanceOf,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of services.products.actors.ProductRequestHandler: Set(UsedName(asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(id,[Default]), UsedName(copy$default$1,[Default]), UsedName(DeleteProductById,[Default]), UsedName(copy,[Default]), UsedName(ne,[Default]), UsedName(apply,[Default]), UsedName(isInstanceOf,[Default]), UsedName(==,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(services.products.messages.ProductMessages.DeleteProductById,ModifiedNames(changes = UsedName(toString,[Default]), UsedName(asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName(getClass,[Default]), UsedName(productIterator,[Default]), UsedName(notify,[Default]), UsedName(equals,[Default]), UsedName($asInstanceOf,[Default]), UsedName(andThen,[Default]), UsedName(unapply,[Default]), UsedName($init$,[Default]), UsedName(!=,[Default]), UsedName(finalize,[Default]), UsedName(##,[Default]), UsedName(canEqual,[Default]), UsedName($isInstanceOf,[Default]), UsedName(productElement,[Default]), UsedName(synchronized,[Default]), UsedName(productArity,[Default]), UsedName(clone,[Default]), UsedName(id,[Default]), UsedName(copy$default$1,[Default]), UsedName(wait,[Default]), UsedName(services;products;messages;ProductMessages;DeleteProductById;init;,[Default]), UsedName(compose,[Default]), UsedName(eq,[Default]), UsedName(notifyAll,[Default]), UsedName(DeleteProductById,[Default]), UsedName(copy,[Default]), UsedName(ne,[Default]), UsedName(productPrefix,[Default]), UsedName(apply,[Default]), UsedName(isInstanceOf,[Default]), UsedName(==,[Default]))) invalidates 3 classes due to The services.products.messages.ProductMessages.DeleteProductById has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(toString,[Default]), UsedName(asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName(getClass,[Default]), UsedName(productIterator,[Default]), UsedName(notify,[Default]), UsedName(equals,[Default]), UsedName($asInstanceOf,[Default]), UsedName(andThen,[Default]), UsedName(unapply,[Default]), UsedName($init$,[Default]), UsedName(!=,[Default]), UsedName(finalize,[Default]), UsedName(##,[Default]), UsedName(canEqual,[Default]), UsedName($isInstanceOf,[Default]), UsedName(productElement,[Default]), UsedName(synchronized,[Default]), UsedName(productArity,[Default]), UsedName(clone,[Default]), UsedName(id,[Default]), UsedName(copy$default$1,[Default]), UsedName(wait,[Default]), UsedName(services;products;messages;ProductMessages;DeleteProductById;init;,[Default]), UsedName(compose,[Default]), UsedName(eq,[Default]), UsedName(notifyAll,[Default]), UsedName(DeleteProductById,[Default]), UsedName(copy,[Default]), UsedName(ne,[Default]), UsedName(productPrefix,[Default]), UsedName(apply,[Default]), UsedName(isInstanceOf,[Default]), UsedName(==,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(services.products.messages.ProductMessages.DeleteProductById)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> by member reference: Set(routes.Router, services.products.actors.ProductRequestHandler)[0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from products.messages.ProductMessages.GetProductById...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(products.messages.ProductMessages.GetProductById)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(products.messages.ProductMessages.GetProductById)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(products.messages.ProductMessages.GetProductById,ModifiedNames(changes = UsedName(toString,[Default]), UsedName(asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName(getClass,[Default]), UsedName(productIterator,[Default]), UsedName(notify,[Default]), UsedName(equals,[Default]), UsedName($asInstanceOf,[Default]), UsedName(andThen,[Default]), UsedName(unapply,[Default]), UsedName($init$,[Default]), UsedName(!=,[Default]), UsedName(finalize,[Default]), UsedName(##,[Default]), UsedName(canEqual,[Default]), UsedName($isInstanceOf,[Default]), UsedName(productElement,[Default]), UsedName(synchronized,[Default]), UsedName(GetProductById,[Default]), UsedName(productArity,[Default]), UsedName(clone,[Default]), UsedName(products;messages;ProductMessages;GetProductById;init;,[Default]), UsedName(id,[Default]), UsedName(copy$default$1,[Default]), UsedName(wait,[Default]), UsedName(compose,[Default]), UsedName(eq,[Default]), UsedName(notifyAll,[Default]), UsedName(copy,[Default]), UsedName(ne,[Default]), UsedName(productPrefix,[Default]), UsedName(apply,[Default]), UsedName(isInstanceOf,[Default]), UsedName(==,[Default]))) invalidates 1 classes due to The products.messages.ProductMessages.GetProductById has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(toString,[Default]), UsedName(asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName(getClass,[Default]), UsedName(productIterator,[Default]), UsedName(notify,[Default]), UsedName(equals,[Default]), UsedName($asInstanceOf,[Default]), UsedName(andThen,[Default]), UsedName(unapply,[Default]), UsedName($init$,[Default]), UsedName(!=,[Default]), UsedName(finalize,[Default]), UsedName(##,[Default]), UsedName(canEqual,[Default]), UsedName($isInstanceOf,[Default]), UsedName(productElement,[Default]), UsedName(synchronized,[Default]), UsedName(GetProductById,[Default]), UsedName(productArity,[Default]), UsedName(clone,[Default]), UsedName(products;messages;ProductMessages;GetProductById;init;,[Default]), UsedName(id,[Default]), UsedName(copy$default$1,[Default]), UsedName(wait,[Default]), UsedName(compose,[Default]), UsedName(eq,[Default]), UsedName(notifyAll,[Default]), UsedName(copy,[Default]), UsedName(ne,[Default]), UsedName(productPrefix,[Default]), UsedName(apply,[Default]), UsedName(isInstanceOf,[Default]), UsedName(==,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(products.messages.ProductMessages.GetProductById)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from products.models.Product...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(products.models.Product)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(products.models.Product)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(products.models.Product,ModifiedNames(changes = UsedName(toString,[Default]), UsedName(iterableFormat,[Implicit]), UsedName(productElement2Field,[Default]), UsedName(tuple3Format,[Implicit]), UsedName(asInstanceOf,[Default]), UsedName(viaSeq,[Default]), UsedName(jsonFormat8,[Default]), UsedName(jsonFormat11,[Default]), UsedName(extractFieldNames,[Default]), UsedName(hashCode,[Default]), UsedName(eitherFormat,[Implicit]), UsedName(JF,[Default]), UsedName(getClass,[Default]), UsedName(productIterator,[Default]), UsedName(copy$default$3,[Default]), UsedName(jsonFormat10,[Default]), UsedName(RootJsObjectFormat,[Implicit]), UsedName(SymbolJsonFormat,[Implicit]), UsedName(jsonFormat6,[Default]), UsedName(DoubleJsonFormat,[Implicit]), UsedName(tuple6Format,[Implicit]), UsedName(notify,[Default]), UsedName(immIndexedSeqFormat,[Implicit]), UsedName(equals,[Default]), UsedName(mapFormat,[Implicit]), UsedName(lift,[Default]), UsedName(products;models;Product;init;,[Default]), UsedName($asInstanceOf,[Default]), UsedName(seqFormat,[Implicit]), UsedName(jsonFormat9,[Default]), UsedName(delegate,[Default]), UsedName(linearSeqFormat,[Implicit]), UsedName(unapply,[Default]), UsedName($init$,[Default]), UsedName(!=,[Default]), UsedName(finalize,[Default]), UsedName(##,[Default]), UsedName(RootJsArrayFormat,[Implicit]), UsedName(canEqual,[Default]), UsedName(jsonFormat0,[Default]), UsedName($isInstanceOf,[Default]), UsedName(jsonFormat20,[Default]), UsedName(price,[Default]), UsedName(productElement,[Default]), UsedName(setFormat,[Implicit]), UsedName(synchronized,[Default]), UsedName(jsonFormat12,[Default]), UsedName(vectorFormat,[Implicit]), UsedName(productElement2Field$default$4,[Default]), UsedName(StringJsonFormat,[Implicit]), UsedName(productArity,[Default]), UsedName(jsonFormat1,[Default]), UsedName(safeReader,[Default]), UsedName(jsonFormat7,[Default]), UsedName(indexedSeqFormat,[Implicit]), UsedName(FloatJsonFormat,[Implicit]), UsedName(clone,[Default]), UsedName(tuple5Format,[Implicit]), UsedName(JsValueFormat,[Implicit]), UsedName(BigDecimalJsonFormat,[Implicit]), UsedName(UnitJsonFormat,[Implicit]), UsedName(jsonFormat17,[Default]), UsedName(tuple7Format,[Implicit]), UsedName(jsonFormat15,[Default]), UsedName(read,[Default]), UsedName(id,[Default]), UsedName(BigIntJsonFormat,[Implicit]), UsedName(jsonFormat13,[Default]), UsedName(jsonFormat18,[Default]), UsedName(productFormat,[Implicit]), UsedName(jsonFormat16,[Default]), UsedName(immSetFormat,[Implicit]), UsedName(jsonFormat21,[Default]), UsedName(label,[Default]), UsedName(rootJsonFormat,[Default]), UsedName(copy$default$1,[Default]), UsedName(jsonFormat14,[Default]), UsedName(CharJsonFormat,[Implicit]), UsedName(wait,[Default]), UsedName(optionFormat,[Implicit]), UsedName(jsonFormat,[Default]), UsedName(copy$default$2,[Default]), UsedName(lazyFormat,[Default]), UsedName(tuple2Format,[Implicit]), UsedName(eq,[Default]), UsedName(immLinearSeqFormat,[Implicit]), UsedName(jsonFormat3,[Default]), UsedName(notifyAll,[Default]), UsedName(Product,[Default]), UsedName(LongJsonFormat,[Implicit]), UsedName(jsonFormat4,[Default]), UsedName(jsonFormat5,[Default]), UsedName(ByteJsonFormat,[Implicit]), UsedName(jsonFormat2,[Default]), UsedName(OptionFormat,[Default]), UsedName(jsonFormat19,[Default]), UsedName(IntJsonFormat,[Implicit]), UsedName(arrayFormat,[Implicit]), UsedName(copy,[Default]), UsedName(BooleanJsonFormat,[Implicit]), UsedName(ne,[Default]), UsedName(write,[Default]), UsedName(immIterableFormat,[Implicit]), UsedName(immSeqFormat,[Implicit]), UsedName(productPrefix,[Default]), UsedName(fromField,[Default]), UsedName(tuple1Format,[Implicit]), UsedName(tuple4Format,[Implicit]), UsedName(jsonFormat22,[Default]), UsedName(apply,[Default]), UsedName(isInstanceOf,[Default]), UsedName(ShortJsonFormat,[Implicit]), UsedName(listFormat,[Implicit]), UsedName(rootFormat,[Default]), UsedName(==,[Default]))) invalidates 1 classes due to The products.models.Product has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(iterableFormat,[Implicit]), UsedName(tuple3Format,[Implicit]), UsedName(eitherFormat,[Implicit]), UsedName(RootJsObjectFormat,[Implicit]), UsedName(SymbolJsonFormat,[Implicit]), UsedName(DoubleJsonFormat,[Implicit]), UsedName(tuple6Format,[Implicit]), UsedName(immIndexedSeqFormat,[Implicit]), UsedName(mapFormat,[Implicit]), UsedName(seqFormat,[Implicit]), UsedName(linearSeqFormat,[Implicit]), UsedName(RootJsArrayFormat,[Implicit]), UsedName(setFormat,[Implicit]), UsedName(vectorFormat,[Implicit]), UsedName(StringJsonFormat,[Implicit]), UsedName(indexedSeqFormat,[Implicit]), UsedName(FloatJsonFormat,[Implicit]), UsedName(tuple5Format,[Implicit]), UsedName(JsValueFormat,[Implicit]), UsedName(BigDecimalJsonFormat,[Implicit]), UsedName(UnitJsonFormat,[Implicit]), UsedName(tuple7Format,[Implicit]), UsedName(BigIntJsonFormat,[Implicit]), UsedName(productFormat,[Implicit]), UsedName(immSetFormat,[Implicit]), UsedName(CharJsonFormat,[Implicit]), UsedName(optionFormat,[Implicit]), UsedName(tuple2Format,[Implicit]), UsedName(immLinearSeqFormat,[Implicit]), UsedName(LongJsonFormat,[Implicit]), UsedName(ByteJsonFormat,[Implicit]), UsedName(IntJsonFormat,[Implicit]), UsedName(arrayFormat,[Implicit]), UsedName(BooleanJsonFormat,[Implicit]), UsedName(immIterableFormat,[Implicit]), UsedName(immSeqFormat,[Implicit]), UsedName(tuple1Format,[Implicit]), UsedName(tuple4Format,[Implicit]), UsedName(ShortJsonFormat,[Implicit]), UsedName(listFormat,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(products.models.Product)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from products.messages.ProductMessages.ProductsResponse...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(products.messages.ProductMessages.ProductsResponse)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(products.messages.ProductMessages.ProductsResponse)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(products.messages.ProductMessages.ProductsResponse,ModifiedNames(changes = UsedName(toString,[Default]), UsedName(asInstanceOf,[Default]), UsedName(products,[Default]), UsedName(hashCode,[Default]), UsedName(getClass,[Default]), UsedName(productIterator,[Default]), UsedName(notify,[Default]), UsedName(equals,[Default]), UsedName(ProductsResponse,[Default]), UsedName($asInstanceOf,[Default]), UsedName(andThen,[Default]), UsedName(products;messages;ProductMessages;ProductsResponse;init;,[Default]), UsedName(unapply,[Default]), UsedName($init$,[Default]), UsedName(!=,[Default]), UsedName(finalize,[Default]), UsedName(##,[Default]), UsedName(canEqual,[Default]), UsedName($isInstanceOf,[Default]), UsedName(productElement,[Default]), UsedName(synchronized,[Default]), UsedName(productArity,[Default]), UsedName(clone,[Default]), UsedName(copy$default$1,[Default]), UsedName(wait,[Default]), UsedName(compose,[Default]), UsedName(eq,[Default]), UsedName(notifyAll,[Default]), UsedName(copy,[Default]), UsedName(ne,[Default]), UsedName(productPrefix,[Default]), UsedName(apply,[Default]), UsedName(isInstanceOf,[Default]), UsedName(==,[Default]))) invalidates 1 classes due to The products.messages.ProductMessages.ProductsResponse has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(toString,[Default]), UsedName(asInstanceOf,[Default]), UsedName(products,[Default]), UsedName(hashCode,[Default]), UsedName(getClass,[Default]), UsedName(productIterator,[Default]), UsedName(notify,[Default]), UsedName(equals,[Default]), UsedName(ProductsResponse,[Default]), UsedName($asInstanceOf,[Default]), UsedName(andThen,[Default]), UsedName(products;messages;ProductMessages;ProductsResponse;init;,[Default]), UsedName(unapply,[Default]), UsedName($init$,[Default]), UsedName(!=,[Default]), UsedName(finalize,[Default]), UsedName(##,[Default]), UsedName(canEqual,[Default]), UsedName($isInstanceOf,[Default]), UsedName(productElement,[Default]), UsedName(synchronized,[Default]), UsedName(productArity,[Default]), UsedName(clone,[Default]), UsedName(copy$default$1,[Default]), UsedName(wait,[Default]), UsedName(compose,[Default]), UsedName(eq,[Default]), UsedName(notifyAll,[Default]), UsedName(copy,[Default]), UsedName(ne,[Default]), UsedName(productPrefix,[Default]), UsedName(apply,[Default]), UsedName(isInstanceOf,[Default]), UsedName(==,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(products.messages.ProductMessages.ProductsResponse)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from services.products.actors.ProductRequestHandler...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(services.products.actors.ProductRequestHandler)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(services.products.actors.ProductRequestHandler)[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following member ref dependencies of services.products.actors.ProductRequestHandler are invalidated:[0m
[0m[[0m[0mdebug[0m] [0m[0m	routes.Router[0m
[0m[[0m[0mdebug[0m] [0m[0m	services.ApplicationServer[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(services.products.actors.ProductRequestHandler,ModifiedNames(changes = UsedName(toString,[Default]), UsedName(asInstanceOf,[Default]), UsedName(changePrice,[Default]), UsedName(products,[Default]), UsedName(hashCode,[Default]), UsedName(getClass,[Default]), UsedName(_nextId,[Default]), UsedName(notify,[Default]), UsedName(equals,[Default]), UsedName($asInstanceOf,[Default]), UsedName(postRestart,[Default]), UsedName($init$,[Default]), UsedName(!=,[Default]), UsedName(finalize,[Default]), UsedName(Receive,[Default]), UsedName(##,[Default]), UsedName(aroundPostRestart,[Default]), UsedName($isInstanceOf,[Default]), UsedName(receive,[Default]), UsedName(props,[Default]), UsedName(context,[Implicit]), UsedName(synchronized,[Default]), UsedName(create,[Default]), UsedName(unhandled,[Default]), UsedName(product,[Default]), UsedName(log,[Default]), UsedName(clone,[Default]), UsedName(aroundPostStop,[Default]), UsedName(supervisorStrategy,[Default]), UsedName(postStop,[Default]), UsedName(sender,[Default]), UsedName(services;products;actors;ProductRequestHandler;init;,[Default]), UsedName(wait,[Default]), UsedName(eq,[Default]), UsedName(notifyAll,[Default]), UsedName(delete,[Default]), UsedName(preStart,[Default]), UsedName(changeLabel,[Default]), UsedName(list,[Default]), UsedName(self,[Implicit]), UsedName(ne,[Default]), UsedName(ProductRequestHandler,[Default]), UsedName(aroundReceive,[Default]), UsedName(preRestart,[Default]), UsedName(isInstanceOf,[Default]), UsedName(aroundPreStart,[Default]), UsedName(aroundPreRestart,[Default]), UsedName(==,[Default]), UsedName(lookup,[Default]))) invalidates 3 classes due to The services.products.actors.ProductRequestHandler has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(context,[Implicit]), UsedName(self,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(services.products.actors.ProductRequestHandler)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> by member reference: Set(routes.Router, services.ApplicationServer)[0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from products.messages.ProductMessages.ChangeProductPriceRequest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(products.messages.ProductMessages.ChangeProductPriceRequest)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(products.messages.ProductMessages.ChangeProductPriceRequest)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(products.messages.ProductMessages.ChangeProductPriceRequest,ModifiedNames(changes = UsedName(toString,[Default]), UsedName(asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName(getClass,[Default]), UsedName(productIterator,[Default]), UsedName(products;messages;ProductMessages;ChangeProductPriceRequest;init;,[Default]), UsedName(tupled,[Default]), UsedName(notify,[Default]), UsedName(equals,[Default]), UsedName($asInstanceOf,[Default]), UsedName(curried,[Default]), UsedName(unapply,[Default]), UsedName($init$,[Default]), UsedName(!=,[Default]), UsedName(finalize,[Default]), UsedName(##,[Default]), UsedName(canEqual,[Default]), UsedName($isInstanceOf,[Default]), UsedName(price,[Default]), UsedName(productElement,[Default]), UsedName(synchronized,[Default]), UsedName(ChangeProductPriceRequest,[Default]), UsedName(productArity,[Default]), UsedName(clone,[Default]), UsedName(id,[Default]), UsedName(copy$default$1,[Default]), UsedName(wait,[Default]), UsedName(copy$default$2,[Default]), UsedName(eq,[Default]), UsedName(notifyAll,[Default]), UsedName(copy,[Default]), UsedName(ne,[Default]), UsedName(productPrefix,[Default]), UsedName(apply,[Default]), UsedName(isInstanceOf,[Default]), UsedName(==,[Default]))) invalidates 1 classes due to The products.messages.ProductMessages.ChangeProductPriceRequest has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(toString,[Default]), UsedName(asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName(getClass,[Default]), UsedName(productIterator,[Default]), UsedName(products;messages;ProductMessages;ChangeProductPriceRequest;init;,[Default]), UsedName(tupled,[Default]), UsedName(notify,[Default]), UsedName(equals,[Default]), UsedName($asInstanceOf,[Default]), UsedName(curried,[Default]), UsedName(unapply,[Default]), UsedName($init$,[Default]), UsedName(!=,[Default]), UsedName(finalize,[Default]), UsedName(##,[Default]), UsedName(canEqual,[Default]), UsedName($isInstanceOf,[Default]), UsedName(price,[Default]), UsedName(productElement,[Default]), UsedName(synchronized,[Default]), UsedName(ChangeProductPriceRequest,[Default]), UsedName(productArity,[Default]), UsedName(clone,[Default]), UsedName(id,[Default]), UsedName(copy$default$1,[Default]), UsedName(wait,[Default]), UsedName(copy$default$2,[Default]), UsedName(eq,[Default]), UsedName(notifyAll,[Default]), UsedName(copy,[Default]), UsedName(ne,[Default]), UsedName(productPrefix,[Default]), UsedName(apply,[Default]), UsedName(isInstanceOf,[Default]), UsedName(==,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(products.messages.ProductMessages.ChangeProductPriceRequest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from services.products.messages.ProductMessages.ProductsResponse...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(services.products.messages.ProductMessages.ProductsResponse)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(services.products.messages.ProductMessages.ProductsResponse)[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of routes.Router: Set(UsedName(asInstanceOf,[Default]), UsedName(products,[Default]), UsedName(ProductsResponse,[Default]), UsedName(apply,[Default]), UsedName(isInstanceOf,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of services.products.actors.ProductRequestHandler: Set(UsedName(asInstanceOf,[Default]), UsedName(products,[Default]), UsedName(ProductsResponse,[Default]), UsedName(!=,[Default]), UsedName(copy$default$1,[Default]), UsedName(copy,[Default]), UsedName(ne,[Default]), UsedName(apply,[Default]), UsedName(isInstanceOf,[Default]), UsedName(==,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(services.products.messages.ProductMessages.ProductsResponse,ModifiedNames(changes = UsedName(toString,[Default]), UsedName(asInstanceOf,[Default]), UsedName(products,[Default]), UsedName(hashCode,[Default]), UsedName(getClass,[Default]), UsedName(productIterator,[Default]), UsedName(notify,[Default]), UsedName(equals,[Default]), UsedName(ProductsResponse,[Default]), UsedName($asInstanceOf,[Default]), UsedName(andThen,[Default]), UsedName(unapply,[Default]), UsedName($init$,[Default]), UsedName(!=,[Default]), UsedName(finalize,[Default]), UsedName(##,[Default]), UsedName(canEqual,[Default]), UsedName($isInstanceOf,[Default]), UsedName(productElement,[Default]), UsedName(synchronized,[Default]), UsedName(productArity,[Default]), UsedName(clone,[Default]), UsedName(services;products;messages;ProductMessages;ProductsResponse;init;,[Default]), UsedName(copy$default$1,[Default]), UsedName(wait,[Default]), UsedName(compose,[Default]), UsedName(eq,[Default]), UsedName(notifyAll,[Default]), UsedName(copy,[Default]), UsedName(ne,[Default]), UsedName(productPrefix,[Default]), UsedName(apply,[Default]), UsedName(isInstanceOf,[Default]), UsedName(==,[Default]))) invalidates 3 classes due to The services.products.messages.ProductMessages.ProductsResponse has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(toString,[Default]), UsedName(asInstanceOf,[Default]), UsedName(products,[Default]), UsedName(hashCode,[Default]), UsedName(getClass,[Default]), UsedName(productIterator,[Default]), UsedName(notify,[Default]), UsedName(equals,[Default]), UsedName(ProductsResponse,[Default]), UsedName($asInstanceOf,[Default]), UsedName(andThen,[Default]), UsedName(unapply,[Default]), UsedName($init$,[Default]), UsedName(!=,[Default]), UsedName(finalize,[Default]), UsedName(##,[Default]), UsedName(canEqual,[Default]), UsedName($isInstanceOf,[Default]), UsedName(productElement,[Default]), UsedName(synchronized,[Default]), UsedName(productArity,[Default]), UsedName(clone,[Default]), UsedName(services;products;messages;ProductMessages;ProductsResponse;init;,[Default]), UsedName(copy$default$1,[Default]), UsedName(wait,[Default]), UsedName(compose,[Default]), UsedName(eq,[Default]), UsedName(notifyAll,[Default]), UsedName(copy,[Default]), UsedName(ne,[Default]), UsedName(productPrefix,[Default]), UsedName(apply,[Default]), UsedName(isInstanceOf,[Default]), UsedName(==,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(services.products.messages.ProductMessages.ProductsResponse)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> by member reference: Set(routes.Router, services.products.actors.ProductRequestHandler)[0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from services.products.messages.ProductMessages.GetProductsRequest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(services.products.messages.ProductMessages.GetProductsRequest)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(services.products.messages.ProductMessages.GetProductsRequest)[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of routes.Router: Set(UsedName(asInstanceOf,[Default]), UsedName(GetProductsRequest,[Default]), UsedName(isInstanceOf,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of services.products.actors.ProductRequestHandler: Set(UsedName(asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(ne,[Default]), UsedName(GetProductsRequest,[Default]), UsedName(isInstanceOf,[Default]), UsedName(==,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(services.products.messages.ProductMessages.GetProductsRequest,ModifiedNames(changes = UsedName(toString,[Default]), UsedName(asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName(getClass,[Default]), UsedName(notify,[Default]), UsedName(equals,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(finalize,[Default]), UsedName(##,[Default]), UsedName($isInstanceOf,[Default]), UsedName(synchronized,[Default]), UsedName(clone,[Default]), UsedName(wait,[Default]), UsedName(eq,[Default]), UsedName(notifyAll,[Default]), UsedName(ne,[Default]), UsedName(GetProductsRequest,[Default]), UsedName(isInstanceOf,[Default]), UsedName(==,[Default]))) invalidates 3 classes due to The services.products.messages.ProductMessages.GetProductsRequest has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(toString,[Default]), UsedName(asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName(getClass,[Default]), UsedName(notify,[Default]), UsedName(equals,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(finalize,[Default]), UsedName(##,[Default]), UsedName($isInstanceOf,[Default]), UsedName(synchronized,[Default]), UsedName(clone,[Default]), UsedName(wait,[Default]), UsedName(eq,[Default]), UsedName(notifyAll,[Default]), UsedName(ne,[Default]), UsedName(GetProductsRequest,[Default]), UsedName(isInstanceOf,[Default]), UsedName(==,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(services.products.messages.ProductMessages.GetProductsRequest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> by member reference: Set(routes.Router, services.products.actors.ProductRequestHandler)[0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from products.messages.ProductMessages.ProductResponse...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(products.messages.ProductMessages.ProductResponse)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(products.messages.ProductMessages.ProductResponse)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(products.messages.ProductMessages.ProductResponse,ModifiedNames(changes = UsedName(toString,[Default]), UsedName(asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName(getClass,[Default]), UsedName(productIterator,[Default]), UsedName(notify,[Default]), UsedName(equals,[Default]), UsedName(ProductResponse,[Default]), UsedName($asInstanceOf,[Default]), UsedName(andThen,[Default]), UsedName(products;messages;ProductMessages;ProductResponse;init;,[Default]), UsedName(unapply,[Default]), UsedName($init$,[Default]), UsedName(!=,[Default]), UsedName(finalize,[Default]), UsedName(##,[Default]), UsedName(canEqual,[Default]), UsedName($isInstanceOf,[Default]), UsedName(productElement,[Default]), UsedName(synchronized,[Default]), UsedName(productArity,[Default]), UsedName(product,[Default]), UsedName(clone,[Default]), UsedName(copy$default$1,[Default]), UsedName(wait,[Default]), UsedName(compose,[Default]), UsedName(eq,[Default]), UsedName(notifyAll,[Default]), UsedName(copy,[Default]), UsedName(ne,[Default]), UsedName(productPrefix,[Default]), UsedName(apply,[Default]), UsedName(isInstanceOf,[Default]), UsedName(==,[Default]))) invalidates 1 classes due to The products.messages.ProductMessages.ProductResponse has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(toString,[Default]), UsedName(asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName(getClass,[Default]), UsedName(productIterator,[Default]), UsedName(notify,[Default]), UsedName(equals,[Default]), UsedName(ProductResponse,[Default]), UsedName($asInstanceOf,[Default]), UsedName(andThen,[Default]), UsedName(products;messages;ProductMessages;ProductResponse;init;,[Default]), UsedName(unapply,[Default]), UsedName($init$,[Default]), UsedName(!=,[Default]), UsedName(finalize,[Default]), UsedName(##,[Default]), UsedName(canEqual,[Default]), UsedName($isInstanceOf,[Default]), UsedName(productElement,[Default]), UsedName(synchronized,[Default]), UsedName(productArity,[Default]), UsedName(product,[Default]), UsedName(clone,[Default]), UsedName(copy$default$1,[Default]), UsedName(wait,[Default]), UsedName(compose,[Default]), UsedName(eq,[Default]), UsedName(notifyAll,[Default]), UsedName(copy,[Default]), UsedName(ne,[Default]), UsedName(productPrefix,[Default]), UsedName(apply,[Default]), UsedName(isInstanceOf,[Default]), UsedName(==,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(products.messages.ProductMessages.ProductResponse)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from products.actors.ProductRequestHandler...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(products.actors.ProductRequestHandler)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(products.actors.ProductRequestHandler)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(products.actors.ProductRequestHandler,ModifiedNames(changes = UsedName(toString,[Default]), UsedName(asInstanceOf,[Default]), UsedName(changePrice,[Default]), UsedName(products,[Default]), UsedName(hashCode,[Default]), UsedName(getClass,[Default]), UsedName(_nextId,[Default]), UsedName(notify,[Default]), UsedName(equals,[Default]), UsedName($asInstanceOf,[Default]), UsedName(postRestart,[Default]), UsedName($init$,[Default]), UsedName(!=,[Default]), UsedName(finalize,[Default]), UsedName(Receive,[Default]), UsedName(##,[Default]), UsedName(aroundPostRestart,[Default]), UsedName($isInstanceOf,[Default]), UsedName(receive,[Default]), UsedName(props,[Default]), UsedName(context,[Implicit]), UsedName(synchronized,[Default]), UsedName(create,[Default]), UsedName(unhandled,[Default]), UsedName(product,[Default]), UsedName(log,[Default]), UsedName(clone,[Default]), UsedName(products;actors;ProductRequestHandler;init;,[Default]), UsedName(aroundPostStop,[Default]), UsedName(supervisorStrategy,[Default]), UsedName(postStop,[Default]), UsedName(sender,[Default]), UsedName(wait,[Default]), UsedName(eq,[Default]), UsedName(notifyAll,[Default]), UsedName(delete,[Default]), UsedName(preStart,[Default]), UsedName(changeLabel,[Default]), UsedName(list,[Default]), UsedName(self,[Implicit]), UsedName(ne,[Default]), UsedName(ProductRequestHandler,[Default]), UsedName(aroundReceive,[Default]), UsedName(preRestart,[Default]), UsedName(isInstanceOf,[Default]), UsedName(aroundPreStart,[Default]), UsedName(aroundPreRestart,[Default]), UsedName(==,[Default]), UsedName(lookup,[Default]))) invalidates 1 classes due to The products.actors.ProductRequestHandler has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(context,[Implicit]), UsedName(self,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(products.actors.ProductRequestHandler)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from services.products.messages.ProductMessages.ChangeProductLabelRequest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(services.products.messages.ProductMessages.ChangeProductLabelRequest)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(services.products.messages.ProductMessages.ChangeProductLabelRequest)[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of routes.Router: Set(UsedName(asInstanceOf,[Default]), UsedName(ChangeProductLabelRequest,[Default]), UsedName(id,[Default]), UsedName(apply,[Default]), UsedName(isInstanceOf,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of services.products.actors.ProductRequestHandler: Set(UsedName(asInstanceOf,[Default]), UsedName(ChangeProductLabelRequest,[Default]), UsedName(!=,[Default]), UsedName(id,[Default]), UsedName(label,[Default]), UsedName(copy$default$1,[Default]), UsedName(copy$default$2,[Default]), UsedName(copy,[Default]), UsedName(ne,[Default]), UsedName(apply,[Default]), UsedName(isInstanceOf,[Default]), UsedName(==,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(services.products.messages.ProductMessages.ChangeProductLabelRequest,ModifiedNames(changes = UsedName(toString,[Default]), UsedName(asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName(getClass,[Default]), UsedName(productIterator,[Default]), UsedName(tupled,[Default]), UsedName(ChangeProductLabelRequest,[Default]), UsedName(notify,[Default]), UsedName(equals,[Default]), UsedName(services;products;messages;ProductMessages;ChangeProductLabelRequest;init;,[Default]), UsedName($asInstanceOf,[Default]), UsedName(curried,[Default]), UsedName(unapply,[Default]), UsedName($init$,[Default]), UsedName(!=,[Default]), UsedName(finalize,[Default]), UsedName(##,[Default]), UsedName(canEqual,[Default]), UsedName($isInstanceOf,[Default]), UsedName(productElement,[Default]), UsedName(synchronized,[Default]), UsedName(productArity,[Default]), UsedName(clone,[Default]), UsedName(id,[Default]), UsedName(label,[Default]), UsedName(copy$default$1,[Default]), UsedName(wait,[Default]), UsedName(copy$default$2,[Default]), UsedName(eq,[Default]), UsedName(notifyAll,[Default]), UsedName(copy,[Default]), UsedName(ne,[Default]), UsedName(productPrefix,[Default]), UsedName(apply,[Default]), UsedName(isInstanceOf,[Default]), UsedName(==,[Default]))) invalidates 3 classes due to The services.products.messages.ProductMessages.ChangeProductLabelRequest has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(toString,[Default]), UsedName(asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName(getClass,[Default]), UsedName(productIterator,[Default]), UsedName(tupled,[Default]), UsedName(ChangeProductLabelRequest,[Default]), UsedName(notify,[Default]), UsedName(equals,[Default]), UsedName(services;products;messages;ProductMessages;ChangeProductLabelRequest;init;,[Default]), UsedName($asInstanceOf,[Default]), UsedName(curried,[Default]), UsedName(unapply,[Default]), UsedName($init$,[Default]), UsedName(!=,[Default]), UsedName(finalize,[Default]), UsedName(##,[Default]), UsedName(canEqual,[Default]), UsedName($isInstanceOf,[Default]), UsedName(productElement,[Default]), UsedName(synchronized,[Default]), UsedName(productArity,[Default]), UsedName(clone,[Default]), UsedName(id,[Default]), UsedName(label,[Default]), UsedName(copy$default$1,[Default]), UsedName(wait,[Default]), UsedName(copy$default$2,[Default]), UsedName(eq,[Default]), UsedName(notifyAll,[Default]), UsedName(copy,[Default]), UsedName(ne,[Default]), UsedName(productPrefix,[Default]), UsedName(apply,[Default]), UsedName(isInstanceOf,[Default]), UsedName(==,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(services.products.messages.ProductMessages.ChangeProductLabelRequest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> by member reference: Set(routes.Router, services.products.actors.ProductRequestHandler)[0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from services.products.models.Product...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(services.products.models.Product)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(services.products.models.Product)[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following member ref dependencies of services.products.models.Product are invalidated:[0m
[0m[[0m[0mdebug[0m] [0m[0m	routes.Router[0m
[0m[[0m[0mdebug[0m] [0m[0m	services.products.actors.ProductRequestHandler[0m
[0m[[0m[0mdebug[0m] [0m[0m	services.products.messages.ProductMessages.ProductResponse[0m
[0m[[0m[0mdebug[0m] [0m[0m	services.products.messages.ProductMessages.ProductsResponse[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(services.products.models.Product,ModifiedNames(changes = UsedName(toString,[Default]), UsedName(iterableFormat,[Implicit]), UsedName(productElement2Field,[Default]), UsedName(tuple3Format,[Implicit]), UsedName(asInstanceOf,[Default]), UsedName(viaSeq,[Default]), UsedName(jsonFormat8,[Default]), UsedName(jsonFormat11,[Default]), UsedName(extractFieldNames,[Default]), UsedName(hashCode,[Default]), UsedName(eitherFormat,[Implicit]), UsedName(JF,[Default]), UsedName(getClass,[Default]), UsedName(productIterator,[Default]), UsedName(copy$default$3,[Default]), UsedName(jsonFormat10,[Default]), UsedName(RootJsObjectFormat,[Implicit]), UsedName(SymbolJsonFormat,[Implicit]), UsedName(jsonFormat6,[Default]), UsedName(DoubleJsonFormat,[Implicit]), UsedName(tuple6Format,[Implicit]), UsedName(notify,[Default]), UsedName(immIndexedSeqFormat,[Implicit]), UsedName(equals,[Default]), UsedName(mapFormat,[Implicit]), UsedName(lift,[Default]), UsedName($asInstanceOf,[Default]), UsedName(seqFormat,[Implicit]), UsedName(jsonFormat9,[Default]), UsedName(delegate,[Default]), UsedName(linearSeqFormat,[Implicit]), UsedName(unapply,[Default]), UsedName($init$,[Default]), UsedName(!=,[Default]), UsedName(finalize,[Default]), UsedName(##,[Default]), UsedName(RootJsArrayFormat,[Implicit]), UsedName(canEqual,[Default]), UsedName(jsonFormat0,[Default]), UsedName($isInstanceOf,[Default]), UsedName(jsonFormat20,[Default]), UsedName(price,[Default]), UsedName(productElement,[Default]), UsedName(setFormat,[Implicit]), UsedName(synchronized,[Default]), UsedName(jsonFormat12,[Default]), UsedName(vectorFormat,[Implicit]), UsedName(productElement2Field$default$4,[Default]), UsedName(StringJsonFormat,[Implicit]), UsedName(productArity,[Default]), UsedName(jsonFormat1,[Default]), UsedName(safeReader,[Default]), UsedName(jsonFormat7,[Default]), UsedName(indexedSeqFormat,[Implicit]), UsedName(FloatJsonFormat,[Implicit]), UsedName(clone,[Default]), UsedName(tuple5Format,[Implicit]), UsedName(JsValueFormat,[Implicit]), UsedName(BigDecimalJsonFormat,[Implicit]), UsedName(UnitJsonFormat,[Implicit]), UsedName(jsonFormat17,[Default]), UsedName(tuple7Format,[Implicit]), UsedName(jsonFormat15,[Default]), UsedName(read,[Default]), UsedName(id,[Default]), UsedName(BigIntJsonFormat,[Implicit]), UsedName(services;products;models;Product;init;,[Default]), UsedName(jsonFormat13,[Default]), UsedName(jsonFormat18,[Default]), UsedName(productFormat,[Implicit]), UsedName(jsonFormat16,[Default]), UsedName(immSetFormat,[Implicit]), UsedName(jsonFormat21,[Default]), UsedName(label,[Default]), UsedName(rootJsonFormat,[Default]), UsedName(copy$default$1,[Default]), UsedName(jsonFormat14,[Default]), UsedName(CharJsonFormat,[Implicit]), UsedName(wait,[Default]), UsedName(optionFormat,[Implicit]), UsedName(jsonFormat,[Default]), UsedName(copy$default$2,[Default]), UsedName(lazyFormat,[Default]), UsedName(tuple2Format,[Implicit]), UsedName(eq,[Default]), UsedName(immLinearSeqFormat,[Implicit]), UsedName(jsonFormat3,[Default]), UsedName(notifyAll,[Default]), UsedName(Product,[Default]), UsedName(LongJsonFormat,[Implicit]), UsedName(jsonFormat4,[Default]), UsedName(jsonFormat5,[Default]), UsedName(ByteJsonFormat,[Implicit]), UsedName(jsonFormat2,[Default]), UsedName(OptionFormat,[Default]), UsedName(jsonFormat19,[Default]), UsedName(IntJsonFormat,[Implicit]), UsedName(arrayFormat,[Implicit]), UsedName(copy,[Default]), UsedName(BooleanJsonFormat,[Implicit]), UsedName(ne,[Default]), UsedName(write,[Default]), UsedName(immIterableFormat,[Implicit]), UsedName(immSeqFormat,[Implicit]), UsedName(productPrefix,[Default]), UsedName(fromField,[Default]), UsedName(tuple1Format,[Implicit]), UsedName(tuple4Format,[Implicit]), UsedName(jsonFormat22,[Default]), UsedName(apply,[Default]), UsedName(isInstanceOf,[Default]), UsedName(ShortJsonFormat,[Implicit]), UsedName(listFormat,[Implicit]), UsedName(rootFormat,[Default]), UsedName(==,[Default]))) invalidates 5 classes due to The services.products.models.Product has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(iterableFormat,[Implicit]), UsedName(tuple3Format,[Implicit]), UsedName(eitherFormat,[Implicit]), UsedName(RootJsObjectFormat,[Implicit]), UsedName(SymbolJsonFormat,[Implicit]), UsedName(DoubleJsonFormat,[Implicit]), UsedName(tuple6Format,[Implicit]), UsedName(immIndexedSeqFormat,[Implicit]), UsedName(mapFormat,[Implicit]), UsedName(seqFormat,[Implicit]), UsedName(linearSeqFormat,[Implicit]), UsedName(RootJsArrayFormat,[Implicit]), UsedName(setFormat,[Implicit]), UsedName(vectorFormat,[Implicit]), UsedName(StringJsonFormat,[Implicit]), UsedName(indexedSeqFormat,[Implicit]), UsedName(FloatJsonFormat,[Implicit]), UsedName(tuple5Format,[Implicit]), UsedName(JsValueFormat,[Implicit]), UsedName(BigDecimalJsonFormat,[Implicit]), UsedName(UnitJsonFormat,[Implicit]), UsedName(tuple7Format,[Implicit]), UsedName(BigIntJsonFormat,[Implicit]), UsedName(productFormat,[Implicit]), UsedName(immSetFormat,[Implicit]), UsedName(CharJsonFormat,[Implicit]), UsedName(optionFormat,[Implicit]), UsedName(tuple2Format,[Implicit]), UsedName(immLinearSeqFormat,[Implicit]), UsedName(LongJsonFormat,[Implicit]), UsedName(ByteJsonFormat,[Implicit]), UsedName(IntJsonFormat,[Implicit]), UsedName(arrayFormat,[Implicit]), UsedName(BooleanJsonFormat,[Implicit]), UsedName(immIterableFormat,[Implicit]), UsedName(immSeqFormat,[Implicit]), UsedName(tuple1Format,[Implicit]), UsedName(tuple4Format,[Implicit]), UsedName(ShortJsonFormat,[Implicit]), UsedName(listFormat,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(services.products.models.Product)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> by member reference: Set(services.products.messages.ProductMessages.ProductsResponse, services.products.messages.ProductMessages.ProductResponse, routes.Router, services.products.actors.ProductRequestHandler)[0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from products.messages.ProductMessages...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(products.messages.ProductMessages)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(products.messages.ProductMessages)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(products.messages.ProductMessages,ModifiedNames(changes = UsedName(toString,[Default]), UsedName(ProductMessages,[Default]), UsedName(asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName(getClass,[Default]), UsedName(ChangeProductLabelRequest,[Default]), UsedName(notify,[Default]), UsedName(equals,[Default]), UsedName(ProductResponse,[Default]), UsedName(AddProductRequest,[Default]), UsedName(ProductsResponse,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(finalize,[Default]), UsedName(##,[Default]), UsedName($isInstanceOf,[Default]), UsedName(synchronized,[Default]), UsedName(GetProductById,[Default]), UsedName(ChangeProductPriceRequest,[Default]), UsedName(clone,[Default]), UsedName(wait,[Default]), UsedName(eq,[Default]), UsedName(notifyAll,[Default]), UsedName(DeleteProductById,[Default]), UsedName(ne,[Default]), UsedName(GetProductsRequest,[Default]), UsedName(isInstanceOf,[Default]), UsedName(==,[Default]))) invalidates 1 classes due to The products.messages.ProductMessages has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(toString,[Default]), UsedName(ProductMessages,[Default]), UsedName(asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName(getClass,[Default]), UsedName(ChangeProductLabelRequest,[Default]), UsedName(notify,[Default]), UsedName(equals,[Default]), UsedName(ProductResponse,[Default]), UsedName(AddProductRequest,[Default]), UsedName(ProductsResponse,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(finalize,[Default]), UsedName(##,[Default]), UsedName($isInstanceOf,[Default]), UsedName(synchronized,[Default]), UsedName(GetProductById,[Default]), UsedName(ChangeProductPriceRequest,[Default]), UsedName(clone,[Default]), UsedName(wait,[Default]), UsedName(eq,[Default]), UsedName(notifyAll,[Default]), UsedName(DeleteProductById,[Default]), UsedName(ne,[Default]), UsedName(GetProductsRequest,[Default]), UsedName(isInstanceOf,[Default]), UsedName(==,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(products.messages.ProductMessages)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mNew invalidations:[0m
[0m[[0m[0mdebug[0m] [0m[0m	Set(routes.Router, services.ApplicationServer)[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(routes.Router, services.ApplicationServer)[0m
[0m[[0m[0mdebug[0m] [0m[0mIncluding services.ApplicationServer by routes.Router[0m
[0m[[0m[0mdebug[0m] [0m[0mPreviously invalidated, but (transitively) depend on new invalidations:[0m
[0m[[0m[0mdebug[0m] [0m[0m	Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mAll newly invalidated classes after taking into account (previously) recompiled classes:Set()[0m
